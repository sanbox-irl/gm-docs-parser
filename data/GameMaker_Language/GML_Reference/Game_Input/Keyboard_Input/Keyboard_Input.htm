<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "9.2.7.1";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Keyboard Input</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Reference section for Keyboard Input"/>
  <meta name="rh-index-keywords" content="vk_nokey,vk_anykey,vk_left,vk_right,vk_up,vk_down,vk_enter,vk_escape,vk_space,vk_shift,vk_control,vk_alt,vk_backspace,vk_tab,vk_home,vk_end,vk_delete,vk_insert,vk_pageup,vk_pagedown,vk_pause,vk_printscreen,vk_f1,vk_f2,vk_f3,vk_f4,vk_f5,vk_f6,vk_f7,vk_f8,vk_f9,vk_f10,vk_f11,vk_f12,vk_numpad0,vk_numpad1,vk_numpad2,vk_numpad3,vk_numpad4,vk_numpad5,vk_numpad6,vk_numpad7,vk_numpad8,vk_numpad9,vk_multiply,vk_divide,vk_add,vk_subtract,vk_decimal,vk_lshift,vk_lcontrol,vk_lalt,vk_rshift,vk_rcontrol,vk_ralt"/>
  <meta name="search-keywords" content="Keyboard Input,vk_nokey,vk_anykey,vk_left,vk_right,vk_up,vk_down,vk_enter,vk_escape,vk_space,vk_shift,vk_control,vk_alt,vk_backspace,vk_tab,vk_home,vk_end,vk_delete,vk_insert,vk_pageup,vk_pagedown,vk_pause,vk_printscreen,vk_f1,vk_f2,vk_f3,vk_f4,vk_f5,vk_f6,vk_f7,vk_f8,vk_f9,vk_f10,vk_f11,vk_f12,vk_numpad0,vk_numpad1,vk_numpad2,vk_numpad3,vk_numpad4,vk_numpad5,vk_numpad6,vk_numpad7,vk_numpad8,vk_numpad9,vk_multiply,vk_divide,vk_add,vk_subtract,vk_decimal,vk_lshift,vk_lcontrol,vk_lalt,vk_rshift,vk_rcontrol,vk_ralt"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Keyboard Input">
        <span>Keyboard Input</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Keyboard Input</h1>
  <p>When dealing with the keyboard in GameMaker Studio 2 you have a variety of functions that can be used to recognise different keyboard states like pressed or released. There are also some that store all the key-presses as a string or that can
    tell you what the last key pressed was, as well as others that allow you to clear the keyboard state completely.</p>
  <p class="note"><b>NOTE:</b> These functions are designed for Windows/Mac/Ubuntu desktop platforms only. You may find some of the built-in variables and constants aren&#39;t valid on other platforms and many of the functions won&#39;t work on mobiles.</p>
  <p>Each input character from a key (or multiple keys) is defined by its <a href="https://en.wikipedia.org/wiki/UTF-8" target="_blank">UTF8</a> code, which is a numerical value. This value can be retrieved for any character using the <a href="../../Strings/ord.htm"><tt>ord()</tt></a>    function but, GameMaker Studio 2 also has a series of <tt>constants</tt> for the most used keyboard special keys and a special functions. Typically you&#39;d use a combination of <tt>ord()</tt> with the <tt>keyboard_check*()</tt> functions,
    something like this:</p>
  <p class="code">if keyboard_check(ord(&quot;A&quot;))<br/>     {
    <br/>     hspeed = -5;<br/>     }
  </p>
  <p>So, the above will check the &quot;A&quot; key and if it&#39;s being pressed then it&#39;ll set the horizontal speed of the object to -5. Note, that using <tt>ord()</tt> in this way will only function correctly if the input string is only one character
    in length and is a number from 0 to 9 or a <i>capitalised</i> Roman character from A to Z. The function <tt>ord()</tt> will return a full UTF8 value, but the <tt>keyboard_check*()</tt> functions will <i>only detect A - Z and 0 - 9</i>. But what if
    you want to use the arrow keys? Or if you want to modify an action using the &quot;shift&quot; key? Well, for that GameMaker Studio 2 has a series of <tt>vk_</tt> constants (<tt>vk_</tt> stands for <i>virtual key</i>) that you can use in place
    of <tt>ord()</tt>:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><tt>vk_nokey</tt></td>
        <td>keycode representing that no key is pressed</td>
      </tr>
      <tr>
        <td><tt>vk_anykey</tt></td>
        <td>keycode representing that any key is pressed</td>
      </tr>
      <tr>
        <td><tt>vk_left</tt></td>
        <td>keycode for the left arrow key</td>
      </tr>
      <tr>
        <td><tt>vk_right</tt></td>
        <td>keycode for the right arrow key</td>
      </tr>
      <tr>
        <td><tt>vk_up</tt></td>
        <td>keycode for the up arrow key</td>
      </tr>
      <tr>
        <td><tt>vk_down</tt></td>
        <td>keycode for the down arrow key</td>
      </tr>
      <tr>
        <td><tt>vk_enter</tt></td>
        <td>enter key</td>
      </tr>
      <tr>
        <td><tt>vk_escape</tt></td>
        <td>escape key</td>
      </tr>
      <tr>
        <td><tt>vk_space</tt></td>
        <td>space key</td>
      </tr>
      <tr>
        <td><tt>vk_shift</tt></td>
        <td>either of the shift keys</td>
      </tr>
      <tr>
        <td><tt>vk_control</tt></td>
        <td>either of the control keys</td>
      </tr>
      <tr>
        <td><tt>vk_alt</tt></td>
        <td>alt key</td>
      </tr>
      <tr>
        <td><tt>vk_backspace</tt></td>
        <td>backspace key</td>
      </tr>
      <tr>
        <td><tt>vk_tab</tt></td>
        <td>tab key</td>
      </tr>
      <tr>
        <td><tt>vk_home</tt></td>
        <td>home key</td>
      </tr>
      <tr>
        <td><tt>vk_end</tt></td>
        <td>end key</td>
      </tr>
      <tr>
        <td><tt>vk_delete</tt></td>
        <td>delete key</td>
      </tr>
      <tr>
        <td><tt>vk_insert</tt></td>
        <td>insert key</td>
      </tr>
      <tr>
        <td><tt>vk_pageup</tt></td>
        <td>pageup key</td>
      </tr>
      <tr>
        <td><tt>vk_pagedown</tt></td>
        <td>pagedown key</td>
      </tr>
      <tr>
        <td><tt>vk_pause</tt></td>
        <td>pause/break key</td>
      </tr>
      <tr>
        <td><tt>vk_printscreen</tt></td>
        <td>printscreen/sysrq key</td>
      </tr>
      <tr>
        <td><tt>vk_f1 ... vk_f12</tt></td>
        <td>keycode for the function keys F1 to F12</td>
      </tr>
      <tr>
        <td><tt>vk_numpad0 ... vk_numpad9</tt></td>
        <td>number keys on the numeric keypad</td>
      </tr>
      <tr>
        <td><tt>vk_multiply</tt></td>
        <td>multiply key on the numeric keypad</td>
      </tr>
      <tr>
        <td><tt>vk_divide</tt></td>
        <td>divide key on the numeric keypad</td>
      </tr>
      <tr>
        <td><tt>vk_add</tt></td>
        <td>add key on the numeric keypad</td>
      </tr>
      <tr>
        <td><tt>vk_subtract</tt></td>
        <td>subtract key on the numeric keypad</td>
      </tr>
      <tr>
        <td><tt>vk_decimal</tt></td>
        <td>decimal dot keys on the numeric keypad</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>The following constants can only be used with <tt>keyboard_check_direct()</tt>:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><tt>vk_lshift</tt></td>
        <td>left shift key</td>
      </tr>
      <tr>
        <td><tt>vk_lcontrol</tt></td>
        <td>left control key</td>
      </tr>
      <tr>
        <td><tt>vk_lalt</tt></td>
        <td>left alt key</td>
      </tr>
      <tr>
        <td><tt>vk_rshift</tt></td>
        <td>right shift key</td>
      </tr>
      <tr>
        <td><tt>vk_rcontrol</tt></td>
        <td>right control key</td>
      </tr>
      <tr>
        <td><tt>vk_ralt</tt></td>
        <td>right alt key</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p><span style="text-align: justify;">The following is a small example of how to use the</span><span style="text-align: justify;"> </span><tt>vk_</tt><span style="text-align: justify;"> </span><span style="text-align: justify;">constants:</span></p>
  <p class="code">if keyboard_check_pressed(vk_tab)<br/>     {
    <br/>     instance_create_layer(x, y, &quot;Controllers&quot;, obj_Menu);<br/>     }
  </p>
  <p>The above code will detect if the &quot;Tab&quot; key is <i>pressed</i> and create an instance of object &quot;obj_Menu&quot; if it is.</p>
  <p>If you need to check for a key character that is not 0 - 9, A - Z or one of the VK constants, then you should be checking one of the <tt>keyboard_*</tt> variables, like <tt>keyboard_lastchar</tt> for example:</p>
  <p class="code">var _key = keyboard_lastchar;<br/> if ord(_key) == ord(&quot;ç&quot;)<br/>     {
    <br/>     show_debug_message(&quot;ç key pressed&quot;);<br/>     }
  </p>
  <p>The following functions are available for use when working with a keyboard:</p>
  <p class="note"><b>NOTE</b>: These functions will <i>not</i> work when using an on-screen <a href="../Virtual_Keys_And_Keyboards/Virtual_Keys_And_Keyboards.htm">Virtual Keyboard</a>.</p>
  <ul class="colour">
    <li><a href="io_clear.htm">io_clear</a></li>
    <li><a href="keyboard_check.htm">keyboard_check</a></li>
    <li><a href="keyboard_check_pressed.htm">keyboard_check_pressed</a></li>
    <li><a href="keyboard_check_released.htm">keyboard_check_released</a></li>
    <li><a href="keyboard_check_direct.htm">keyboard_check_direct</a></li>
    <li><a href="keyboard_clear.htm">keyboard_clear</a></li>
    <li><a href="keyboard_set_map.htm">keyboard_set_map</a></li>
    <li><a href="keyboard_get_map.htm">keyboard_get_map</a></li>
    <li><a href="keyboard_unset_map.htm">keyboard_unset_map</a></li>
    <li><a href="keyboard_set_numlock.htm">keyboard_set_numlock</a></li>
    <li><a href="keyboard_get_numlock.htm">keyboard_get_numlock</a></li>
  </ul>
  <p> </p>
  <p>There are also some functions that can be used to simulate keypresses:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="keyboard_key_press.htm">keyboard_key_press</a></li>
    <li><a href="keyboard_key_release.htm">keyboard_key_release</a></li>
  </ul>
  <p> </p>
  <p>Finally, the following variables are built-in to GameMaker Studio 2 and can be accessed to get information about the keyboard state and input:</p>
  <p class="note"><b>NOTE</b>: When using the <a href="../Virtual_Keys_And_Keyboards/Virtual_Keys_And_Keyboards.htm">Virtual Keyboard</a>, <i>only</i> the <span style="font-size:1px;"><tt style="font-size: 14px">keyboard_string</tt></span> variable will be updated with
    the keyboard input.</p>
  <p> </p>
  <ul class="colour">
    <li><a href="keyboard_key.htm">keyboard_key</a></li>
    <li><a href="keyboard_lastkey.htm">keyboard_lastkey</a></li>
    <li><a href="keyboard_lastchar.htm">keyboard_lastchar</a></li>
    <li><a href="keyboard_string.htm">keyboard_string</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Game_Input.htm">Game Input</a></div>
        <div style="float:right">Next: <a href="../Mouse_Input/Mouse_Input.htm">Mouse Input</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Keyboard Input Functions
vk_nokey
vk_anykey
vk_left
vk_right
vk_up
vk_down
vk_enter
vk_escape
vk_space
vk_shift
vk_control
vk_alt
vk_backspace
vk_tab
vk_home
vk_end
vk_delete
vk_insert
vk_pageup
vk_pagedown
vk_pause
vk_printscreen
vk_f1
vk_f2
vk_f3
vk_f4
vk_f5
vk_f6
vk_f7
vk_f8
vk_f9
vk_f10
vk_f11
vk_f12
vk_numpad0
vk_numpad1
vk_numpad2
vk_numpad3
vk_numpad4
vk_numpad5
vk_numpad6
vk_numpad7
vk_numpad8
vk_numpad9
vk_multiply
vk_divide
vk_add
vk_subtract
vk_decimal
vk_lshift
vk_lcontrol
vk_lalt
vk_rshift
vk_rcontrol
vk_ralt
-->
  <!-- TAGS
keyboard_functions
-->

</body></html>