<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "9.2.15.3.0_3";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>steam_upload_score_buffer</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Reference page for steam_upload_score_buffer"/>
  <meta name="rh-index-keywords" content="steam_upload_score_buffer"/>
  <meta name="search-keywords" content="steam_upload_score_buffer"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="steam_upload_score_buffer">
        <span>steam_upload_score_buffer</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>steam_upload_score_buffer</h1>
  <p>This function will send a score to the given leaderboard along with a data package created from a buffer. The buffer should be no more than 256 bytes in size - anything beyond that will be chopped off - and can contain any data you require. The score
    to be uploaded should be a real number, and the leaderboard name is a string that was defined when you created the leaderboard using the function <a href="steam_create_leaderboard.htm"><tt>steam_create_leaderboard()</tt></a>.</p>
  <p>If the function fails, it will return a value of -1, while a successful post will return a unique ID for the upload and trigger an asynchronous <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Steam.htm">Steam Event</a>. This event
    will create a <tt>DS Map</tt> in the built in variable <tt>async_load</tt> with the following key/value pairs:</p>
  <ul class="colour">
    <li>&quot;<b>event_type</b>&quot; - This key will hold the value &quot;<b>leaderboard_upload</b>&quot; when triggered by this function</li>
    <li>&quot;<b>lb_name</b>&quot; - This key holds the name of the leaderboard which was posted to</li>
    <li>&quot;<b>success</b>&quot; - Will be 1 if the post succeeded, 0 failed</li>
    <li>&quot;<b>updated</b>&quot; - Will be 1 if the leaderboard score was actually updated (ie: the new score was better) or 0 otherwise. Note that if the score is updated, the uploaded buffer data will not be added either.</li>
    <li>&quot;<b>post_id</b>&quot; - This key should match the ID value returned by the upload call</li>
    <li>&quot;<b>score</b>&quot; - This key holds the score which was posted</li>
  </ul>
  <p>Note that when downloading the leaderboard, the &quot;entries&quot; key of the <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><tt>async_load</tt></a> map will now have a &quot;data&quot; key so you can retrieve the
    uploaded data buffer (see the <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Steam.htm">Steam Event</a> extended code example for further details). This data buffer will be <b>Base 64 encoded</b> and so you will need to use
    the function <a href="../../Buffers/buffer_base64_decode.htm"><tt>buffer_base64_decode()</tt></a> on the data before reading from the buffer.</p>
  <p> </p>
  <h4>Syntax:</h4>
  <p class="code">steam_upload_score_buffer(lb_name, score, buffer);</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>lb_name</td>
        <td>The name of the leaderboard that you are uploading the scores to (a string).</td>
      </tr>
      <tr>
        <td>score</td>
        <td>The score to upload (a real number).</td>
      </tr>
      <tr>
        <td>buffer</td>
        <td>The ID of the buffer to attach.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">Real</p>
  <p> </p>
  <h4>Extended Example:</h4>
  <p>In this example, we first upload a score and then parse the <tt>async_load</tt> map returned if successful. The code below shows a typical example for uploading, with a buffer being created to hold a string telling us which level the score was uploaded
    from:</p>
  <p class="code">if (hp &lt;= 0)<br/>     {
    <br/>     var buff = buffer_create(256, buffer_fixed, 1 );<br/>     buffer_write(buff, buffer_string, &quot;Uploaded on level &quot; + string(global.Level));<br/>     upload_ID = steam_upload_score(&quot;Game Scores&quot;, score, buff);<br/>     if
    (!upload_ID)<br/>         {
    <br/>         alarm[0] = room_speed;<br/>         }
    <br/>     buffer_delete(buff);
    <br/>     }
  </p>
  <p>Note that we have set an alarm if the call fails. This would be used to try the upload again at a later time and you can add extra code there to retry the upload or to save the score to a text file should it continue to fail, etc... Also note that we
    immediately delete the buffer, since it is no longer required for the function. We now add the following into the <b>Steam async event</b> for the instance controlling the scores:</p>
  <p class="code">var type = ds_map_find_value(async_load, &quot;event_type&quot;);<br/> if (type == &quot;leaderboard_upload&quot;)<br/>     {
    <br/>     var lb_ID = ds_map_find_value(async_load, &quot;post_id&quot;);<br/>     if lb_ID == upload_ID<br/>         {
    <br/>         var lb_name = ds_map_find_value(async_load, &quot;lb_name&quot;);<br/>         var lb_done = ds_map_find_value(async_load, &quot;success&quot;);<br/>         var lb_score = ds_map_find_value(async_load, &quot;score&quot;);<br/>         var
    lb_updated = ds_map_find_value(async_load, &quot;updated&quot;);<br/>         show_debug_message(&quot;leaderboard post id:&quot; + string(lb_ID) + &quot; to lb:&quot; + string(lb_name) + &quot; with score:&quot; + string(lb_score) + &quot; updated=&quot;
    + string(lb_updated));<br/>         if (lb_done)<br/>             {
    <br/>             show_debug_message(&quot;- Succeeded&quot;);<br/>             }
    <br/>         else
    <br/>             {
    <br/>             show_debug_message(&quot;- Failed&quot;);<br/>             }
    <br/>         }
    <br/>     }
  </p>
  <p>In the example we are simply outputting the return values to the compiler window as debug messages, but you can use this event to deal with the information in any way you choose.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Steam_Leaderboards.htm">Leaderboards</a></div>
        <div style="float:right">Next: <a href="steam_download_scores.htm">steam_download_scores</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
steam_upload_score_buffer
-->
  <!-- TAGS
steam_upload_score_buffer
-->

</body></html>