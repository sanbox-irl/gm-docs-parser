<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "9.2.2.8";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Shaders"/>
  <meta name="rh-index-keywords" content=""/>
  <meta name="search-keywords" content="Shaders,_YY_GLSLES_,_YY_GLSL_,_YY_HLSL11_,_YY_PSSL_"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="Shaders">
        <span>Shaders</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Shaders</h1>
  <p>Shaders are an incredibly powerful tool for manipulating what and how things are <a class="tooltip" title="When something is rendered in GameMaker Studio 2, it generally means that it has simply been &#39;drawn to the display buffer&#39; or &#39;drawn to a surface&#39;.  Rendering can also refer to the process of turning some kind of vector source (like a font) into a bitmap image,.">rendered</a> to the screen by the graphics card. Since these tiny programs are actually run on the graphics card
    itself, this means that they are extremely fast to process, freeing up valuable CPU cycles for more game logic.</p>
  <p>To create a shader you will need to have written both a <b>Vertex Shader</b> and a <b>Fragment Shader</b> (also know as a <b>Pixel Shader</b>) using the <a href="../../../../The_Asset_Editors/Shaders.htm">Shader Editor</a>, and even if (for example)
    you only wish to change the vertex positions for an instance being drawn, or if you only want to change the colour values for the pixels, you will still need <b>both</b> programs for a complete shader to work.</p>
  <p class="note"><b>NOTE</b>: Shaders do <b>not</b> permit you to change the value of any variables that you pass into them, and so these will be called <b>shader constants</b> in all the documentation that refers to them.</p>
  <p>For a complete overview of the available GLSL ES functions and variables that you can use to program the shaders themselves, please refer to the <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/es_cm_spec_2.0.pdf" target="_blank">OpenGL ES Shading Language (GLSL ES) Reference Pages</a>.
    The following link is also useful as it contains some quick reference cards for the OpenGL ES Api (note that only the last two cards shown are applicable to GameMaker Studio 2): <a href="https://www.khronos.org/opengles/sdk/docs/reference_cards/OpenGL-ES-2_0-Reference-card.pdf">OpenGL ES Reference Cards</a>.</p>
  <p>Using a shader in your projects is very simple, and only requires a couple of lines of code to get the most basic of use from it:</p>
  <p class="code">shader_set(myShader);<br/> draw_self();
    <br/> shader_reset();
  </p>
  <p>As you can see, they are used in a similar manner to blend modes and surfaces, where you first select (set) the shader, draw what you want using it, then reset the draw target again afterwards. If you wish to render the full screen through a shader,
    and not just a single sprite or background, you will need to set up a surface to catch the current view, and then pass that through to the shader (see <a href="../../Drawing/Surfaces/Surfaces.htm">Surfaces</a> for more information).</p>
  <p class="note"><b>NOTE</b>: Shaders, like anything related to drawing, can <b>only be used in the draw event</b>. It is also worth noting that if you are trying to use a colour value in a shader and the object has no texture, the results will turn out black.</p>
  <p>If the shader you are using has input values, these are set using the <i>uniform</i> functions. You would first get the uniform <i>handle</i> (which is essentially an ID value for the uniform to be set) using the function <a href="shader_get_uniform.htm"><tt>shader_get_uniform()</tt></a> in
    the <b>Create Event</b> of the instance using the shader, and then store these handles in variables, something like this:</p>
  <p class="code">colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br/> colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);</p>
  <p>Once you have the uniform handles, they can then be set in the shader code for the <b>Draw Event</b> like this:</p>
  <p class="code">shader_set(sShaderDemo5);<br/> shader_set_uniform_f(colour_to_find, 1,1,1 );<br/> shader_set_uniform_f(colour_to_set, 1,0,0 );<br/> draw_sprite(sprite_index,image_index,x+24, y);<br/> shader_reset();
  </p>
  <p>One final thing to note is that although shaders are accepted across all platforms, they are still device specific and if the hardware or software of the device cannot use shaders then you will get an error. Therefore you are recommended to check that
    the shader has been compiled before setting uniforms or using the shader itself, like this:</p>
  <p class="code">if (shader_is_compiled(myShader))<br/>     {
    <br/>     shader_set(myShader);
    <br/>     draw_self();
    <br/>     shader_reset();
    <br/>     }
    <br/> else show_debug_message(&quot;Shader failed&quot;);</p>
  <p>As an extra check you can also call the function <a href="shaders_are_supported.htm"><tt>shaders_are_supported()</tt></a> to see if the hardware even supports shaders. In general you&#39;d do these checks on game start and store the results as a
    <a href="../../../GML_Overview/Variables/Global_Variables.htm">global variable</a> to then check later.</p>
  <p>It is important to note that GameMaker Studio 2 also supports some conditional compile <b>Macros</b> which can be used within GLSL ES shaders so they can perform alternative code on specific supported platforms. The macros and the platforms they
    will be generated on are shown in the table below:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Shader Macro</th>
        <th>Value</th>
        <th>Target Platform</th>
      </tr>
      <tr>
        <td>_YY_GLSLES_</td>
        <td>1</td>
        <td>All target platforms</td>
      </tr>
      <tr>
        <td>_YY_GLSL_</td>
        <td>2</td>
        <td>Mac and Ubuntu (Linux)</td>
      </tr>
      <tr>
        <td>_YY_HLSL11_</td>
        <td>3</td>
        <td>Windows, UWP, XboxOne</td>
      </tr>
      <tr>
        <td>_YY_PSSL_</td>
        <td>4</td>
        <td>PS4</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>When you compile your GameMaker Studio 2 project on any one of the listed platforms using a GLSL ES format shader, <i>one</i> of the above macros will be generated which can then be used checked in the shader code like this:</p>
  <p class="code">#ifdef _YY_HLSL11_<br/> // HLSL shader code here<br/> #else
    <br/> // GLSL shader code here<br/> #endif
  </p>
  <p>If you are new to shaders or want a more complete guide to creating and use them using GameMaker Studio 2, then please see the following page of the manual:</p>
  <ul class="colour">
    <li><a href="../../../../Additional_Information/Guide_To_Using_Shaders.htm">Guide To Using Shaders</a></li>
  </ul>
  <p> </p>
  <p>The following functions are available for drawing and setting shaders:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="shader_get_name.htm">shader_get_name</a></li>
    <li><a href="shader_get_uniform.htm">shader_get_uniform</a></li>
    <li><a href="shader_get_sampler_index.htm">shader_get_sampler_index</a></li>
    <li><a href="shader_set.htm">shader_set</a></li>
    <li><a href="shader_set_uniform_f.htm">shader_set_uniform_f</a></li>
    <li><a href="shader_set_uniform_f_array.htm">shader_set_uniform_f_array</a></li>
    <li><a href="shader_set_uniform_i.htm">shader_set_uniform_i</a></li>
    <li><a href="shader_set_uniform_i_array.htm">shader_set_uniform_i_array</a></li>
    <li><a href="shader_set_uniform_matrix.htm">shader_set_uniform_matrix</a></li>
    <li><a href="shader_set_uniform_matrix_array.htm">shader_set_uniform_matrix_array</a></li>
    <li><a href="shader_reset.htm">shader_reset</a></li>
    <li><a href="shader_is_compiled.htm">shader_is_compiled</a></li>
    <li><a href="shaders_are_supported.htm">shaders_are_supported</a></li>
    <li><a href="shader_current.htm">shader_current</a></li>
  </ul>
  <p> </p>
  <p>We also have a special function which defines a global state for all shaders:</p>
  <ul>
    <li><a href="shader_enable_corner_id.htm">shader_enable_corner_id</a></li>
  </ul>
  <p> </p>
  <p>When working with texture samplers in shaders you will need information about the texture being used, in which case you can use the following functions:</p>
  <p> </p>
  <ul class="colour">
    <li><a href="../Sprites/Sprite_Information/sprite_get_texture.htm">sprite_get_texture</a></li>
    <li><a href="../Sprites/Sprite_Information/sprite_get_uvs.htm">sprite_get_uvs</a></li>
    <li><a href="../Fonts/font_get_texture.htm">font_get_texture</a></li>
    <li><a href="../Fonts/font_get_uvs.htm">font_get_uvs</a></li>
    <li><a href="../../Drawing/Textures/texture_get_width.htm">texture_get_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_height.htm">texture_get_height</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_width.htm">texture_get_texel_width</a></li>
    <li><a href="../../Drawing/Textures/texture_get_texel_height.htm">texture_get_texel_height</a></li>
    <li><a href="../../Drawing/Textures/texture_set_stage.htm">texture_set_stage</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texfilter_ext.htm">gpu_set_texfilter_ext</a></li>
    <li><a href="../../Drawing/GPU_Control/gpu_set_texrepeat.htm">gpu_set_texrepeat</a></li>
  </ul>
  <p> </p>
  <p>While this manual will <b>not</b> cover any of the Open GL shader functions and variables, it does contain a list of the ones that are unique to GameMaker Studio 2. These constants are not part of the Open GL specification for shaders and are
    supplied to simplify the integration of shaders within your projects.</p>
  <ul class="colour">
    <li><a href="Shader_Constants.htm">Shader Constants</a></li>
  </ul>
  <p> </p>
  <p>Finally, GameMaker Studio 2 permits you to define your own <b>Vertex Formats</b> from which you can create your own custom primitives. This can greatly speed up shader operations or can be used to extend their capabilities and create surprising
    effects. You can find information on this in the following sections:</p>
  <ul class="colour">
    <li><a href="../../Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitives Vnd Vertex Formats</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="../Asset_Management.htm">Asset Management</a></div>
        <div style="float:right">Next: <a href="../Sequences/Sequences.htm">Sequences</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
Shaders
_YY_GLSLES_
_YY_GLSL_
_YY_HLSL11_
_YY_PSSL_
-->
  <!-- TAGS
shader_functions
-->

</body></html>