<?xml version="1.0" encoding="utf-8" ?>

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>

  <script type="text/javascript" language="JavaScript">
    //<![CDATA[
    function reDo() {
      if (innerWidth != origWidth || innerHeight != origHeight)
        location.reload();
    }
    if ((parseInt(navigator.appVersion) == 4) && (navigator.appName == "Netscape")) {
      origWidth = innerWidth;
      origHeight = innerHeight;
      onresize = reDo;
    }
    onerror = null;
  //]]>
  </script>
  <style type="text/css">/*<![CDATA[*/

    < !-- div.WebHelpPopupMenu {
      position: absolute;
      left: 0px;
      top: 0px;
      z-index: 4;
      visibility: hidden;
    }

    p.WebHelpNavBar {
      text-align: right;
    }

    -->
  
/*]]>*/</style>

  <script type="text/javascript">//<![CDATA[

    gRootRelPath = "../../../..";
    gCommonRootRelPath = "../../../..";
    gTopicId = "9.2.12.5.0_14";
  
//]]></script>

  <script type="text/javascript" src="../../../../template/scripts/rh.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/common.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topic.min.js"></script>
  <script type="text/javascript" src="../../../../template/scripts/topicwidgets.min.js"></script>
<script type="text/javascript" src="../../../../whxdata/projectsettings.js"></script>
  <link rel="stylesheet" type="text/css" href="../../../../template/styles/topic.min.css"/>
  <link rel="stylesheet" type="text/css" href="../../../../template/Charcoal_Grey/topicheader.css"/>
  <meta name="topic-status" content="Draft"/>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>achievement_load_leaderboard</title>
  <meta name="generator" content="Adobe RoboHelp 2019"/>
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css"/>
  <meta name="rh-authors" content="Mark Alexander"/>
  <meta name="topic-comment" content="Reference page for achievement_load_leaderboard"/>
  <meta name="rh-index-keywords" content="achievement_load_leaderboard,achievement_leaderboard_info,achievement_filter_friends_only,achievement_filter_all_players"/>
  <meta name="search-keywords" content="achievement_load_leaderboard,achievement_leaderboard_info,achievement_filter_friends_only,achievement_filter_all_players"/>
</head>

<body>
  <div class="topic-header rh-hide" id="rh-topic-header" onclick="rh._.goToFullLayout()">
    <div class="logo">
    </div>
    <div class="nav">
      <div class="title" title="achievement_load_leaderboard">
        <span>achievement_load_leaderboard</span>
      </div>
      <div class="gotohome" title="Click here to see this page in full context">
        <span>Click here to see this page in full context</span>
      </div>
    </div>
  </div>
  <div class="topic-header-shadow rh-hide" id="rh-topic-header-shadow"></div>



  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>achievement_load_leaderboard</h1>
  <p>This function will send a request to the server for information on the given leaderboard. The leaderboard must have been created previously on the developer dashboard for your game and the ID given is that which you must supply as the first argument
    of the function. It will trigger a callback <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Social.htm">Social Asynchronous Event</a> which contains the <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><tt>async_load</tt></a>    map populated with the relevant key/value pairs. The <i>id</i> key of this <tt>DS Map</tt> is used to identify the correct callback (there can be more than one trigger function for any given asynchronous event), and will be paired with the <b>constant</b>    <tt>achievement_leaderboard_info</tt> as well as a number of other key/value pairs for each player. The exact contents of the map are shown below:</p>
  <p class="note"><b>NOTE</b>: this function is for <b>iOS</b> only.</p>
  <ul class="colour">
    <li>&quot;<b>id</b>&quot; - For this function it should be <tt>achievement_leaderboard_info</tt></li>
    <li>&quot;<b>leaderboardid</b>&quot; - The unique ID for the leaderboard as defined on the provider dashboard.</li>
    <li>&quot;<b>numentries</b>&quot; - The number of entries in the leaderboard that you have received.</li>
    <li>&quot;<b>PlayerN</b>&quot; - The name of the player, where &quot;N&quot; is an integer value corresponding to their position within the leaderboard entries list.</li>
    <li>&quot;<b>PlayeridN</b>&quot; - The unique user id of the player, &quot;N&quot;.</li>
    <li>&quot;<b>RankN</b>&quot; - The rank of the player &quot;N&quot; within the leaderboard.</li>
    <li>&quot;<b>ScoreN</b>&quot; - The score of the player &quot;N&quot;.</li>
  </ul>
  <p>You can specify the exact portion of the leaderboard to show by giving a minimum and maximum index value, as well as request that the results be filtered to retrieve only those scores by your friends or those posted by all players using the following
    filter <b>constants</b>:</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>achievement_filter_friends_only </td>
        <td>Get only the scores of the players friends.</td>
      </tr>
      <tr>
        <td>achievement_filter_all_players </td>
        <td>Get all scores for all players.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p> </p>
  <h4><b>Syntax:</b></h4>
  <p class="code">achievement_load_leaderboard(ident, minindex, maxindex, filter)</p>
  <table>
    <tbody>
      <tr>
        <th>Argument</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>ident</td>
        <td>The unique ID of the leaderboard as shown on the developer dashboard.</td>
      </tr>
      <tr>
        <td>minindex</td>
        <td>The starting index value to get the leaderboard data from.</td>
      </tr>
      <tr>
        <td>maxindex</td>
        <td>The maximum index value to get the leaderboard data from.</td>
      </tr>
      <tr>
        <td>filter</td>
        <td>Whether to filter the results to those that are on your friends list or to all players (see the <b>Description</b> below)</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Returns:</h4>
  <p class="code">N/A</p>
  <p> </p>
  <h4>Extended Example:</h4>
  <p>The following code would probably be called after the player has logged into their game account using <a href="achievement_login.htm"><tt>achievement_login()</tt></a> to get a list of all friends leaderboard positions for the game, on either Android
    or iOS:</p>
  <p class="code">if os_type == os_ios<br/>     {
    <br/>     achievement_load_leaderboard(&quot;CgkIs9_51u0PEAIQBw&quot;, 1, 100, achievement_filter_friends_only);<br/>     }
  </p>
  <p>This will send off a request for the information on the given leaderboard and generate an asynchronous callback with the special <tt>async_load</tt> ds_map containing the following data:</p>
  <p class="code">var ident = ds_map_find_value(async_load, &quot;id&quot;);<br/> if ident == achievement_leaderboard_info<br/>     {
    <br/>     var lbid = ds_map_find_value(async_load,&quot;leaderboardid&quot;);<br/>     if lbid == &quot;CgkIs9_51u0PEAIQBw&quot; || lbid == &quot;leaderboard1id&quot;<br/>         {
    <br/>         global.numentries = ds_map_find_value(async_load,&quot;numentries&quot;);<br/>         for(var i = 0; i &lt; numentries; i++;)<br/>             {
    <br/>             global.playername[i] = ds_map_find_value(async_load, &quot;Player&quot; + string(i));<br/>             global.playerid[i] = ds_map_find_value(async_load, &quot;Playerid&quot; + string(i));<br/>             global.playerrank[i] =
    ds_map_find_value(async_load, &quot;Rank&quot; + string(i));<br/>             global.playerscore[i] = ds_map_find_value(async_load, &quot;Score&quot; + string(i));<br/>             achievement_get_pic(global.playerid[i]);
    <br/>             }
    <br/>         }
    <br/>     }
  </p>
  <p>The above code checks the returned <tt>DS Map</tt> in the <b>Social Asynchronous Event</b> and if its &quot;id&quot; matches the constant being checked, it then checks to make sure that the leaderboard being sent matches the original function call before
    looping through the map and storing all the different values in a number of arrays. It also requests an image for each of the entries in the map (see <a href="achievement_get_pic.htm"><tt>achievement_get_pic()</tt></a>).</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Back: <a href="Achievements_And_Leaderboards.htm">Achievements And Leaderboards</a></div>
        <div style="float:right">Next: <a href="achievement_load_progress.htm">achievement_load_progress</a></div>
      </div>
    </div>
    <h5>© Copyright YoYo Games Ltd. 2020 All Rights Reserved</h5>
  </div>
  <!-- KEYWORDS
achievement_load_leaderboard
achievement_leaderboard_info
achievement_filter_friends_only 
achievement_filter_all_players 
-->
  <!-- TAGS
achievement_load_leaderboard
-->

</body></html>